package com.thomasvansevenant.daoModels;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.thomasvansevenant.daoModels.RedditPost;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REDDIT_POST".
*/
public class RedditPostDao extends AbstractDao<RedditPost, Long> {

    public static final String TABLENAME = "REDDIT_POST";

    /**
     * Properties of entity RedditPost.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Author = new Property(1, String.class, "author", false, "AUTHOR");
        public final static Property ThumbnailUrl = new Property(2, String.class, "thumbnailUrl", false, "THUMBNAIL_URL");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property ImageUrl = new Property(4, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property IdPost = new Property(5, String.class, "idPost", false, "ID_POST");
        public final static Property After = new Property(6, String.class, "after", false, "AFTER");
        public final static Property NumComments = new Property(7, Integer.class, "numComments", false, "NUM_COMMENTS");
    };


    public RedditPostDao(DaoConfig config) {
        super(config);
    }
    
    public RedditPostDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REDDIT_POST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AUTHOR\" TEXT," + // 1: author
                "\"THUMBNAIL_URL\" TEXT," + // 2: thumbnailUrl
                "\"TITLE\" TEXT," + // 3: title
                "\"IMAGE_URL\" TEXT," + // 4: imageUrl
                "\"ID_POST\" TEXT," + // 5: idPost
                "\"AFTER\" TEXT," + // 6: after
                "\"NUM_COMMENTS\" INTEGER);"); // 7: numComments
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REDDIT_POST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RedditPost entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String thumbnailUrl = entity.getThumbnailUrl();
        if (thumbnailUrl != null) {
            stmt.bindString(3, thumbnailUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(5, imageUrl);
        }
 
        String idPost = entity.getIdPost();
        if (idPost != null) {
            stmt.bindString(6, idPost);
        }
 
        String after = entity.getAfter();
        if (after != null) {
            stmt.bindString(7, after);
        }
 
        Integer numComments = entity.getNumComments();
        if (numComments != null) {
            stmt.bindLong(8, numComments);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RedditPost readEntity(Cursor cursor, int offset) {
        RedditPost entity = new RedditPost( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // author
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // thumbnailUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idPost
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // after
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // numComments
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RedditPost entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAuthor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setThumbnailUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdPost(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAfter(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNumComments(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RedditPost entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RedditPost entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
